
CS122A Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000030a  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010a  0080010a  000003a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010df  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000998  00000000  00000000  0000160f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000724  00000000  00000000  00001fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  000026cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061d  00000000  00000000  0000298c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c9  00000000  00000000  00002fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003672  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a1 c0       	rjmp	.+322    	; 0x178 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	db c0       	rjmp	.+438    	; 0x204 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e0       	ldi	r30, 0x0A	; 10
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	03 d1       	rcall	.+518    	; 0x2ca <main>
  c4:	20 c1       	rjmp	.+576    	; 0x306 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	for (unsigned int i = 0; i < 3; i++){
		str[2-i] = rx%10 + '0';
		rx = rx/10;
	}
	LCD_DisplayString(1, &str);
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	10 98       	cbi	0x02, 0	; 2
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	11 9a       	sbi	0x02, 1	; 2
  f4:	00 00       	nop
  f6:	11 98       	cbi	0x02, 1	; 2
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_init>:
 106:	84 e6       	ldi	r24, 0x64	; 100
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	de df       	rcall	.-68     	; 0xc8 <delay_ms>
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	ef df       	rcall	.-34     	; 0xee <LCD_WriteCommand>
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	ed df       	rcall	.-38     	; 0xee <LCD_WriteCommand>
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	eb df       	rcall	.-42     	; 0xee <LCD_WriteCommand>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	e9 df       	rcall	.-46     	; 0xee <LCD_WriteCommand>
 11c:	8a e0       	ldi	r24, 0x0A	; 10
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	d3 cf       	rjmp	.-90     	; 0xc8 <delay_ms>
 122:	08 95       	ret

00000124 <LCD_WriteData>:
 124:	10 9a       	sbi	0x02, 0	; 2
 126:	8b b9       	out	0x0b, r24	; 11
 128:	11 9a       	sbi	0x02, 1	; 2
 12a:	00 00       	nop
 12c:	11 98       	cbi	0x02, 1	; 2
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	ca cf       	rjmp	.-108    	; 0xc8 <delay_ms>
 134:	08 95       	ret

00000136 <LCD_Cursor>:
 136:	81 31       	cpi	r24, 0x11	; 17
 138:	18 f4       	brcc	.+6      	; 0x140 <LCD_Cursor+0xa>
 13a:	81 58       	subi	r24, 0x81	; 129
 13c:	d8 cf       	rjmp	.-80     	; 0xee <LCD_WriteCommand>
 13e:	08 95       	ret
 140:	81 55       	subi	r24, 0x51	; 81
 142:	d5 cf       	rjmp	.-86     	; 0xee <LCD_WriteCommand>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	ea df       	rcall	.-44     	; 0x136 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	df df       	rcall	.-66     	; 0x124 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <__vector_13>:
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_avr_timer_cntcurr>
 18e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x1>
 192:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x2>
 196:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x3>
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	a1 09       	sbc	r26, r1
 19e:	b1 09       	sbc	r27, r1
 1a0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 1a4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 1a8:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 1ac:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 1b0:	89 2b       	or	r24, r25
 1b2:	8a 2b       	or	r24, r26
 1b4:	8b 2b       	or	r24, r27
 1b6:	99 f4       	brne	.+38     	; 0x1de <__vector_13+0x66>
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <TimerFlag>
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1ca:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1ce:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 1d2:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 1d6:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 1da:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <SPI_ServantInit>:
 1f0:	78 94       	sei
 1f2:	80 e4       	ldi	r24, 0x40	; 64
 1f4:	84 b9       	out	0x04, r24	; 4
 1f6:	8c bd       	out	0x2c, r24	; 44
 1f8:	08 95       	ret

000001fa <SPI_ServantReceive>:
 1fa:	0d b4       	in	r0, 0x2d	; 45
 1fc:	07 fe       	sbrs	r0, 7
 1fe:	fd cf       	rjmp	.-6      	; 0x1fa <SPI_ServantReceive>
 200:	8e b5       	in	r24, 0x2e	; 46
 202:	08 95       	ret

00000204 <__vector_19>:
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	0b b6       	in	r0, 0x3b	; 59
 210:	0f 92       	push	r0
 212:	2f 93       	push	r18
 214:	3f 93       	push	r19
 216:	4f 93       	push	r20
 218:	5f 93       	push	r21
 21a:	6f 93       	push	r22
 21c:	7f 93       	push	r23
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	af 93       	push	r26
 224:	bf 93       	push	r27
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <spiFlag>
 230:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 234:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
 238:	30 97       	sbiw	r30, 0x00	; 0
 23a:	09 f0       	breq	.+2      	; 0x23e <__vector_19+0x3a>
 23c:	09 95       	icall
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	bf 91       	pop	r27
 244:	af 91       	pop	r26
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	7f 91       	pop	r23
 24c:	6f 91       	pop	r22
 24e:	5f 91       	pop	r21
 250:	4f 91       	pop	r20
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0b be       	out	0x3b, r0	; 59
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <InitCpu>:
 264:	fc 01       	movw	r30, r24
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	80 83       	st	Z, r24
 26a:	11 82       	std	Z+1, r1	; 0x01
 26c:	12 82       	std	Z+2, r1	; 0x02
 26e:	13 82       	std	Z+3, r1	; 0x03
 270:	14 82       	std	Z+4, r1	; 0x04
 272:	15 82       	std	Z+5, r1	; 0x05
 274:	16 82       	std	Z+6, r1	; 0x06
 276:	17 82       	std	Z+7, r1	; 0x07
 278:	df 01       	movw	r26, r30
 27a:	a8 5f       	subi	r26, 0xF8	; 248
 27c:	b7 4f       	sbci	r27, 0xF7	; 247
 27e:	11 96       	adiw	r26, 0x01	; 1
 280:	1c 92       	st	X, r1
 282:	1e 92       	st	-X, r1
 284:	12 96       	adiw	r26, 0x02	; 2
 286:	1d 92       	st	X+, r1
 288:	1c 92       	st	X, r1
 28a:	e4 5f       	subi	r30, 0xF4	; 244
 28c:	f7 4f       	sbci	r31, 0xF7	; 247
 28e:	10 82       	st	Z, r1
 290:	08 95       	ret

00000292 <TickCpu>:
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
 298:	fc 01       	movw	r30, r24
 29a:	e4 5f       	subi	r30, 0xF4	; 244
 29c:	f7 4f       	sbci	r31, 0xF7	; 247
 29e:	80 81       	ld	r24, Z
 2a0:	88 23       	and	r24, r24
 2a2:	51 f0       	breq	.+20     	; 0x2b8 <TickCpu+0x26>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	71 f4       	brne	.+28     	; 0x2c4 <TickCpu+0x32>
 2a8:	a8 df       	rcall	.-176    	; 0x1fa <SPI_ServantReceive>
 2aa:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <spiFlag>
 2ae:	c4 5f       	subi	r28, 0xF4	; 244
 2b0:	d7 4f       	sbci	r29, 0xF7	; 247
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	88 83       	st	Y, r24
 2b6:	06 c0       	rjmp	.+12     	; 0x2c4 <TickCpu+0x32>
 2b8:	ce 01       	movw	r24, r28
 2ba:	d4 df       	rcall	.-88     	; 0x264 <InitCpu>
 2bc:	c4 5f       	subi	r28, 0xF4	; 244
 2be:	d7 4f       	sbci	r29, 0xF7	; 247
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	88 83       	st	Y, r24
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <main>:

int main(void)
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	c5 52       	subi	r28, 0x25	; 37
 2d4:	d8 40       	sbci	r29, 0x08	; 8
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF;
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xFF;
 2e4:	87 b9       	out	0x07, r24	; 7
	DDRA = 0xFF;
 2e6:	81 b9       	out	0x01, r24	; 1
	PORTC = 0x0F;
 2e8:	8f e0       	ldi	r24, 0x0F	; 15
 2ea:	88 b9       	out	0x08, r24	; 8
	SPI_ServantInit();
 2ec:	81 df       	rcall	.-254    	; 0x1f0 <SPI_ServantInit>
    LCD_init(); 
 2ee:	0b df       	rcall	.-490    	; 0x106 <LCD_init>
 2f0:	64 e0       	ldi	r22, 0x04	; 4
	LCD_DisplayString(1,"test");
 2f2:	71 e0       	ldi	r23, 0x01	; 1
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	27 df       	rcall	.-434    	; 0x146 <LCD_DisplayString>
 2f8:	ce 01       	movw	r24, r28
	struct cpu c;
	InitCpu(&c);
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	b3 df       	rcall	.-154    	; 0x264 <InitCpu>
 2fe:	ce 01       	movw	r24, r28
	//unsigned char rx;
	//srand(1);
	//displayReceived(0xAB);
    while (1) 
    {
		TickCpu(&c);
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	c7 df       	rcall	.-114    	; 0x292 <TickCpu>
 304:	fc cf       	rjmp	.-8      	; 0x2fe <main+0x34>

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
